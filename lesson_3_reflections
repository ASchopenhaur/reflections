When would you want to use a remote repository rather than keeping all your work local?
Using a remote repository comes in handy when files are going to be created on different computers and/or
in different geographic locations.  If this is the case, the remote depository can serve as the central depository
where work coming from different locations can be integrated into the whole application.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
There might be situations where different people collaborating on a project will push application modifications onto the remote despository.  In such cases it would be wise to be more discerning about what to pull from remote depository as opposed to simply pulling everything automatically without any filtering.

Describe the differences between forks, clones, and branches.  When would you use one instead of another?
A fork is the copying of a depository from one Github account to another Github account.  The copying is done entirely on the Github servers and the depositories on local computers are not amended or altered.  Cloning refers to copying a depository to a local computer.  The depository that is being copied can either reside on a Github server or on a local computer.  The important point is that the resultant copy will end up on a local computer.  A branch does not refer to the copying or cloning of files.  A branch is more of a deviation in the commit progressions.  It describes a commit progression that is connected but progressing independently of how commits are progressing on the main branch.

What is the benefit of having a copy of the last known state of the remote stored locally?
A local copy of the remote state helps differentiate between the work done locally and the collaborative work done on other machines.  It also comes in handy when the collaborative work is ultimately merged with the local copy because it is easier to narrow done conflicts that might arise after an attempted merge.

How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?
Collaborating without GitHub would likely be accomplished by using emails and attachments.  It would probably be easier to send an email to a team member explaining what changes and additions are being requested.  This is true when compared to the time expended in mastering the rules and technical jargon of git commands.  Email collaboration might work out well in a very small project but it would be almost nearly impossible when working with numerous collaborators on a large project with many files.  Those types of projects require a good bookeeping and tracking system that synchronizes the development and merging of collaborative efforts.